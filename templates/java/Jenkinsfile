pipeline {
    agent {
        kubernetes {
            yamlFile 'K8sPod.yaml'
        }
    }

    environment {
        DINGTALK_URL = "$DINGTALK_WEBHOOK"
        DOCKER_REPO = "$IMAGE_REPOSITORY"
        OWNER_PHONE = "$PHONE"
    }

    options {
        disableConcurrentBuilds()
    }


    stages {
        stage('prepare') {
            steps {
                sh '''
                  curl -d '{"msgtype": "text","text": {"content":"'"$JOB_NAME"': 开始打包应用与构建镜像'"$BUILD_URL"'"}}' -H 'Content-Type: application/json'  "$DINGTALK_URL"
                '''
                script {
                    env.IMAGE_TAG = ""
                }
            }
        }

        stage('build-Parallel') {

            when {
                anyOf {
                    branch 'dev'
                    branch 'release'
                    branch 'master'
                }
            }
            failFast false

            parallel {

                stage('build-test') {
                    when {
                        beforeAgent true
                        branch 'dev'
                    }

                    steps {
                        container('maven') {
                            echo "build-test"
                            sh '''
                                mvn clean
                                mvn package -P test
                            '''
                        }
                    }
                }

                stage('build-uat') {

                    when {
                        beforeAgent true
                        branch 'release'
                    }

                    steps {
                        container('maven') {
                            echo "build-uat"
                            sh '''
                                mvn clean
                                mvn package -P uat
                            '''
                        }
                    }
                }

                stage('build-prod') {

                    when {
                        beforeAgent true
                        branch 'master'
                    }

                    steps {
                        container('maven') {
                            echo "build-prod"
                            sh '''
                                mvn clean
                                mvn package -P prod
                            '''
                        }
                    }
                }
            }
        }

        stage("artifacts-manage"){
            steps {
                sh '''
                    curl -d '{"msgtype": "text","text": {"content":"'"$JOB_NAME"': 应用打包成功，开始构建镜像..."}}' -H 'Content-Type: application/json' "$DINGTALK_URL"
                '''
                container('docker') {
                    echo "artifacts"
                    script {
                        sh '''
                          echo "${ALI_DOCKER_HUB_HOST}/${DOCKER_REPO}:${GIT_BRANCH}-${GIT_COMMIT:0:8}-$(date "+%Y%m%d%H%M%S")" > temp.txt
                        '''
                        env.IMAGE_TAG = readFile('temp.txt').trim()
                    }
                    sh '''
                        docker build -t ${IMAGE_TAG}  . || exit 1
                        docker login ${ALI_DOCKER_HUB_HOST} -u ${ALI_DOCKER_HUB_USER} -p ${ALI_DOCKER_HUB_PWD} || exit 1
                        docker push ${IMAGE_TAG} || exit 1
                    '''
                }
                sh '''
                    curl -d '{"msgtype": "text","text": {"content":"'"$JOB_NAME"': 镜像构建成功'"$IMAGE_TAG"'，已推送至镜像仓库"}, "at": { "atMobiles": ["'"$OWNER_PHONE"'"] }}' -H 'Content-Type: application/json' "$DINGTALK_URL"
                '''
            }
        }

    }

    post {

        changed{
            echo 'I changed!'
        }

        failure{
            echo 'I failed!'
            sh '''
              curl -d '{"msgtype": "text","text": {"content":"'"$JOB_NAME"': 打包/构建失败"}, "at": { "atMobiles": ["'"$OWNER_PHONE"'"] }}' -H 'Content-Type: application/json' "$DINGTALK_URL"
            '''
        }

        success{
            echo 'I success'
        }

        always{
            echo 'I always'
         }

        unstable{
            echo "unstable"
        }
        aborted{
            echo "aborted"
        }
    }

}