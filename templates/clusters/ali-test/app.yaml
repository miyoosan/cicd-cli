apiVersion: core.oam.dev/v1beta1
kind: Application
metadata:
  name: $projectName$-$envName$
  namespace: $namespace$
spec:
  components:
    - name: $projectName$-server-$envName$
      type: k8s-objects
      properties:
        objects:
          - apiVersion: apps/v1 # for versions before 1.8.0 use apps/v1beta1
            kind: Deployment
            metadata:
              name: $projectName$-server-$envName$ #示例应用的名称。
              labels:
                app: $projectName$
            spec:
              selector:
                matchLabels:
                  app: $projectName$ # has to match .spec.template.metadata.labels
              strategy:
                type: Recreate
              template:
                metadata:
                  labels:
                    app: $projectName$
                spec:
                  terminationGracePeriodSeconds: 10
                  containers:
                    - name: $projectName$
                      image: $imageName$ # {"$imagepolicy": "$namespace$:fluxcd-$projectName$-$envName$"}
                      $cpt$ports:
                        $cpt$- containerPort: $containerPort$ #需要在服务中暴露该端口。
                      resources:
                        limits:
                          cpu: 400m
                          memory: 512Mi
                        requests:
                          cpu: 10m
                          memory: 256Mi
          $cpt$- apiVersion: v1
            $cpt$kind: Service
            $cpt$metadata:
              $cpt$name: $projectName$-server-$envName$
              $cpt$$slb$annotations:
                $cpt$$slb$service.beta.kubernetes.io/alibaba-cloud-loadbalancer-id: lb-bp1d4ijo8o75n12smbrs3
                $cpt$$slb$service.beta.kubernetes.io/alicloud-loadbalancer-force-override-listeners: 'true'
                $cpt$$slb$service.beta.kubernetes.io/alicloud-loadbalancer-address-type: intranet
              $cpt$labels:
                $cpt$app: $projectName$
            $cpt$spec:
              $cpt$selector:
                $cpt$app: $projectName$
              $cpt$ports:
                $cpt$- port: $servicePort$
                  $cpt$protocol: TCP
                  $cpt$targetPort: $containerPort$
              $cpt$type: $serviceType$
  workflow:
    steps:
      - name: application
        type: apply-component
        properties:
          component: $projectName$-server-$envName$
      - name: dingtalk-post
        # 指定步骤类型
        type: notification
        properties:
          dingding:
            # 钉钉 Webhook 地址，请查看：https://developers.dingtalk.com/document/robots/custom-robot-access
            url:
              value: $dingtalkCICDWebhook$
            message:
              msgtype: text
              text:
                content: $envLabel$:$projectName$部署成功
              at:
                atMobiles:
                  - "$phone$"
